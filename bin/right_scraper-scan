#!/usr/bin/env ruby
#--
# Copyright: Copyright (c) 2010-2016 RightScale, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# 'Software'), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#++

def warn(*args)
  # eliminate ruby/gem warnings from output
end

require 'json'
require 'right_git'
require File.expand_path('../../lib/right_scraper', __FILE__)

if ::ARGV.size != 2
  $stderr.puts "Usage: #{::File.basename(__FILE__)} <options.json> <retrieved.json>"
  exit 1
end

# specifically trap-and-ignore SIGTERM and SIGQUIT to prevent the Docker
# container being stopped on service shutdown. also do not emit any output.
# allows SIGINT for development.
%W(TERM QUIT).each { |s| trap(s) {} }

main = nil
begin
  options = ::JSON.load(::File.read(::ARGV.shift))
  retrieved = ::JSON.load(::File.read(::ARGV.shift))
  main = ::RightScraper::Main.new(options)

  # use credentials from environment, if available.
  if !(aws_access_key_id = ::ENV['AWS_ACCESS_KEY_ID'].to_s).empty?
    options['s3_key'] = aws_access_key_id
    if !(aws_secret_access_key = ::ENV['AWS_SECRET_ACCESS_KEY'].to_s).empty?
      options['s3_secret'] = aws_secret_access_key
    end
  end

  # cleanup any leftover errors/warnings in retrieved hash.
  retrieved.delete('errors')
  retrieved.delete('warnings')
  if main.scan(retrieved)
    result = {}
    result[:warnings] = main.warnings unless main.warnings.empty?

    # we can optimize by not marshaling back resources when the only scanner is
    # CookbookMetadata. the reason is that we expect this scanner to only be
    # called in unprivileged isolation followed by more scanners with more
    # privileges and only the latter need to return fully resolved resources.
    if main.scanners != [RightScraper::Scanners::CookbookMetadata]
      result[:resources] = main.resources.map do |r|
        # remove relational repository from each returned cookbook due to being
        # the same for each resource and already known to caller.
        h = r.to_hash
        h.delete(:repository)
        h
      end
    end
    $stdout.puts(::JSON.generate(result))
  else
    result = { errors: main.errors }
    $stderr.puts(::JSON.generate(result))
    exit 1
  end
  exit 0
rescue ::RightScraper::Error, ::RightGit::Shell::ShellError => e
  # all explicitly raised scraper errors derive from these errors.
  result = { errors: [e.message] }
  $stderr.puts(::JSON.generate(result))
  exit 3
rescue ::SystemExit => e
  exit e.status
rescue ::Exception => e
  result = {
    errors: ['internal error'],
    unhandled_exception: {
      class: e.class,
      message: e.message,
      backtrace: (e.backtrace || []).join("\n")
    }
  }
  $stderr.puts(::JSON.generate(result))
  exit 4
ensure
  main.cleanup rescue nil if main
end
